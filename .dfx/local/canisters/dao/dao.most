// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Neuron =
  {
    creationTime : Int;
    dissolveDelay : Int;
    dissolving : Bool;
    dissolvingLastTimeStamp : Int;
    subAccountBlob : Blob;
    tokenAmount : Nat
  };
type Proposal =
  {
    id : Nat;
    info : Text;
    minimumVote : Float;
    passLimit : Float;
    passed : Bool;
    quadratic : Bool;
    votedAgainst : List<Principal>;
    votedFor : List<Principal>
  };
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var minimumHold : Nat;
  stable var neurons :
    {
      #branch : Branch<Principal, Neuron>;
      #empty;
      #leaf : Leaf<Principal, Neuron>
    };
  stable var nextProposalId : Nat;
  stable var passLimit : Float;
  stable var proposals :
    {#branch : Branch<Int, Proposal>; #empty; #leaf : Leaf<Int, Proposal>};
  stable var quadraticVoting : Bool
};
